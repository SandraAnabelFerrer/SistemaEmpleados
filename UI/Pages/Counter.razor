@page "/counter"
@using System.Text.Json;
@using System.Text;
@using Model;
@using System.Net.Http;
@inject IJSRuntime JSRuntime
<body style="background-color:purple ">
    <div class=" fs-2 p-3 mb-2 bg-dark text-white  text-center">Reporte de Empleados</div>



    <button type="button" class="btn btn-outline-info" @onclick="CargarPersonas">Empleados Activos</button>
    
    <button type="button" class="btn btn-outline-info" @onclick="ReiniciarAplicacion">Reiniciar</button>

    <div class="alert alert-primary" role="alert">@msjPersona</div>



    @if (personas != null)
    {
        <table class="table table-dark table-hover">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Edad</th>
                    <th>Departamento_Persona</th>
                </tr>
                
           
               
            </thead>
            <tbody>
                @foreach (var _persona in personas)
                {
                    <tr>
                        <td>@_persona.Id</td>
                        <td>@_persona.Nombre</td>
                        <td>@_persona.Edad</td>
                        <td></td>
                    </tr>
                }
                
            </tbody>
        </table>
    }

    <button type="button" class="btn btn-outline-info" @onclick="CargarDepartamentos">Cargar Departamentos</button>
     @if (departamentos != null)
    {
        <table class="table table-dark table-hover">
            <thead>
                    <tr><td colspan="2">Departamentos</td></tr>
                    <tr>
                        <th>Id</th>
                        <th>Nombre</th>
                    </tr>
            </thead>
               
         <tbody>
                @foreach (var departamento in departamentos)
                {
                    <tr>
                        <td>@departamento.Id</td>
                        <td>@departamento.Nombre</td>
                        
                    </tr>
                }
            </tbody>

        </table>


    }

    @code {
        private String msjPersona;
        private List<Persona> personas;
        private List<Departamento> departamentos;

       



        private async Task CargarPersonas()
        {
            using (var client = new HttpClient())

            {
                try
                {
                    var result = await client.GetAsync("http://host.docker.internal:5000/api/Persona");
                    if (result.IsSuccessStatusCode)
                    {
                        var resultadoServicio = await result.Content.ReadAsStringAsync();
                        personas = JsonSerializer.Deserialize<List<Persona>>(resultadoServicio, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

                        StateHasChanged();

                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error en CargarPersonas: " + ex.Message);
                }
            }
        }
        private async Task CargarDepartamentos()
        {
            using (var client = new HttpClient())
            {
                try
                {
                    var result1 = await client.GetAsync("http://host.docker.internal:4000/api/Departamento");
                    if (result1.IsSuccessStatusCode)
                    {
                        var resultadoServicio1 = await result1.Content.ReadAsStringAsync();
                        departamentos = JsonSerializer.Deserialize<List<Departamento>>(resultadoServicio1, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });



                        StateHasChanged();


                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine("Error en CargarDepartamentos: " + ex.Message);
                }
            }
        }
       /* private string ObtenerNombreDepartamento(int departamentoId)
        {
            if (departamentos != null)
            {
                var departamento = departamentos.FirstOrDefault(d => d.Id == departamentoId);
                if (departamento != null)
                {
                    return departamento.Nombre;
                }
                else
                {
                    Console.WriteLine($"Departamento no encontrado para el ID: {departamentoId}");
                }
            }
            else
            {
                Console.WriteLine("Departamentos o ID de departamento nulos.");
            }
            return "Desconocido";
        }

        private async Task SetPersona()
        {
            using (var client = new HttpClient())
            {
                try
                {
                    var persona = new Persona
                    {
                        Id = 7,
                        Nombre = "Sofia",

                        Edad = 27
                    };

                    var result = await client.PostAsJsonAsync("http://host.docker.internal:5000/api/Persona/", persona);

                    if (result.IsSuccessStatusCode)
                    {
                        msjPersona = "Persona creada";

                        await CargarPersonas(); // Actualiza la lista de personas si aún no se han cargado

                        StateHasChanged(); // Actualiza la vista
                    }



                }
                catch (Exception ex)
                {
                    msjPersona = ex.Message;
                    Console.Error.WriteLine("Error en SetPersona: " + ex.Message);
                }
            }

        }

        */
        



        private async Task ReiniciarAplicacion()
        {
            await JSRuntime.InvokeVoidAsync("location.reload");
        }
        





    }

</body>
